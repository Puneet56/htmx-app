// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: reminders.sql

package planner_orm

import (
	"context"
	"database/sql"
	"time"
)

const createReminder = `-- name: CreateReminder :exec
INSERT INTO reminders (title, ` + "`" + `description` + "`" + `, remind_at)
VALUES (?, ?, ?)
`

type CreateReminderParams struct {
	Title       string
	Description sql.NullString
	RemindAt    time.Time
}

func (q *Queries) CreateReminder(ctx context.Context, arg CreateReminderParams) error {
	_, err := q.db.ExecContext(ctx, createReminder, arg.Title, arg.Description, arg.RemindAt)
	return err
}

const deleteReminder = `-- name: DeleteReminder :exec
DELETE FROM reminders
WHERE id = ?
`

func (q *Queries) DeleteReminder(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteReminder, id)
	return err
}

const getReminder = `-- name: GetReminder :one
SELECT id, title, description, remind_at FROM reminders
WHERE id = ? LIMIT 1
`

func (q *Queries) GetReminder(ctx context.Context, id uint64) (Reminder, error) {
	row := q.db.QueryRowContext(ctx, getReminder, id)
	var i Reminder
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.RemindAt,
	)
	return i, err
}

const listReminders = `-- name: ListReminders :many
SELECT id, title, description, remind_at FROM reminders
ORDER BY id
`

func (q *Queries) ListReminders(ctx context.Context) ([]Reminder, error) {
	rows, err := q.db.QueryContext(ctx, listReminders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reminder
	for rows.Next() {
		var i Reminder
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.RemindAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReminder = `-- name: UpdateReminder :exec
UPDATE reminders
SET title = ?, ` + "`" + `description` + "`" + ` = ?, remind_at = ?
WHERE id = ?
`

type UpdateReminderParams struct {
	Title       string
	Description sql.NullString
	RemindAt    time.Time
	ID          uint64
}

func (q *Queries) UpdateReminder(ctx context.Context, arg UpdateReminderParams) error {
	_, err := q.db.ExecContext(ctx, updateReminder,
		arg.Title,
		arg.Description,
		arg.RemindAt,
		arg.ID,
	)
	return err
}
